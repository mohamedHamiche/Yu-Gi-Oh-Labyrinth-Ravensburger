struct coordonnees
    entier x
    entier y

struct Tuile
    booléen fixe // 1 fixe  0 couloir
    entier trésor //0 si pas de trésor, n sinon avec 1<= n <=24
    booléen gauche, droite, haut, bas    //0 si mur, 1 si ouverture
    booléen posée //si la tuile est posée ou pas sur le plateau
Tuile Plateau [7][7] // Matrice de tuiles    

struct Joueur
    string pseudo
    coordonneés postion_actuelle
    struct pile pile_trésor
    entier nombre_de_points

Liste des fonctions:

entier modeDeJeu() //demande au joueur de jouer contre joueur ou de jouer contre machine

string lirePseudo(Joueur)

distribuerCartes(Joueur player1, Joueur player2)

    empiler(Joueur, entier x)


initPlateau(Tuile Plateau[7][7], Tuile *tuile_en_main)
    poserTuilesFixes(Tuile Plateau[7][7])
    poserTuilesCouloir(Tuile Plateau[7][7],tuile *tuile_en_main)
        initTuileEnMain(tuile *tuile_en_main)
    

Joueur quiCommence(Joueur p1, Joueur p2) // retourne un des deux joueurs qui va commencer la partie

Joueur alterner(Joueur p1, Joueur p2) // retourne le joueur suivant

insererTuile (Plateau,Tuile &tuile_en_main,coordonnées &choix_precedent)
    coordonnées choixCouloir()
         booléen validationCouloir(coordonnées, &choix_precedent)
            coordonnées opposé (coordonnées choixCouloir) 
                Théoreme d'Ahmed.


    choixOrientationTuile(Tuile *tuile_en_main) //on a le choix entre laisser comme elle est ou la tourner
            touner(Tuile *tuile_en_main, entier nombre_de_tours, char direction) //direction 'g' ou 'd' 
            
    decalerCouloir(Tuile Plateau, coordonneesChoixCouloir())

choixDeplacement(Joueur) 
    validationCoup(coordonnees)
    miseAJourPion(Joueur)
    
    
booléen tresorAtteint(Plateau, Joueur)

depilerTresor(Joueur)

booleéen pileVide(Joueur)

affichageJeu() // cette fonction affichera le jeu sur le terminal ainsi que toutes les informations nécessaires (comme la tuile à insérer le nombres de trésor trouvés pour chaque joueur etc)

affichageGagnant(Joueur Joueur)





